---
interface Props {
  title: string;
  description: string;
  icon: string;
  content: string;
  id: string;
}

const { title, description, icon, content, id } = Astro.props;
---

<div class="feature-card  flex flex-col justify-center items-center p-6 rounded-xl bg-white/15 backdrop-blur-lg border border-white/10 hover:border-purple-500/50 transition-all cursor-pointer"
     data-modal-target={id}>
  <div class="text-8xl mb-4">{icon}</div>
  <h3 class="text-xl font-semibold mb-2 text-white">{title}</h3>
  <p class="text-gray-400">{description}</p>
</div>

<!-- Modal -->
<div id={id} class="modal hidden fixed inset-0 z-50 overflow-y-auto bg-black/50">
  <div class="flex items-center justify-center min-h-screen px-4">
    <div class="relative bg-gray-800 rounded-xl max-w-2xl w-full p-8 overflow-hidden">
      <button class="modal-close absolute top-4 right-4 text-gray-400 hover:text-white">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
      
      <div class="text-4xl mb-4">{icon}</div>
      <h3 class="text-2xl font-bold mb-4 text-white">{title}</h3>
      <div class="prose prose-invert max-w-none">
        <Fragment set:html={content} />
      </div>
    </div>
  </div>
</div>

<style>
  .feature-card {
    transform: translateY(0);
    transition: transform 0.2s ease-in-out;
  }
  
  .feature-card:hover {
    transform: translateY(-5px);
  }

  .modal {
    opacity: 0;
    transition: opacity 0.3s ease-out;
  }

  .modal.active {
    opacity: 1;
  }

  .modal > div > div {
    transform: scale(0.9);
    transition: transform 0.3s ease-out;
  }

  .modal.active > div > div {
    transform: scale(1);
  }
</style>

<script>
  // Initialize modal functionality
  function initModals() {
    const cards = document.querySelectorAll('.feature-card');
    
    cards.forEach(card => {
      const modalId = card.getAttribute('data-modal-target');
      const modal = document.getElementById(modalId as string);
      const closeBtn = modal?.querySelector('.modal-close');
      
      card.addEventListener('click', () => {
        modal?.classList.remove('hidden');
        // Force reflow
        modal?.offsetHeight;
        modal?.classList.add('active');
      });

      closeBtn?.addEventListener('click', () => {
        modal?.classList.remove('active');
        setTimeout(() => {
          modal?.classList.add('hidden');
        }, 300);
      });

      modal?.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.classList.remove('active');
          setTimeout(() => {
            modal.classList.add('hidden');
          }, 300);
        }
      });
    });
  }

  // Run initialization
  initModals();

  // Re-run initialization when navigating with View Transitions
  document.addEventListener('astro:page-load', initModals);
</script>